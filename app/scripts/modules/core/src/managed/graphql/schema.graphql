scalar InstantTime
scalar JSON

type Query {
  application(appName: String!): MdApplication
}

type MdApplication {
  id: String!
  name: String!
  account: String!
  environments: [MdEnvironment!]!
}

type MdEnvironment {
  id: String!
  name: String!
  state: MdEnvironmentState!
}

type MdEnvironmentState {
  id: String!
  resources: [MdResource!]
  artifacts: [MdArtifact!]
}

type MdPinnedVersion {
  id: String!
  name: String!
  reference: String!
  version: String!
  gitMetadata: MdGitMetadata
  buildNumber: String
  pinnedAt: InstantTime
  pinnedBy: String
  comment: String
}

type MdArtifact {
  id: String!
  environment: String!
  name: String!
  type: String!
  reference: String!
  versions(statuses: [MdArtifactStatusInEnvironment!]): [MdArtifactVersionInEnvironment!]
  pinnedVersion: MdPinnedVersion
}

type MdArtifactVersionInEnvironment {
  id: String!
  version: String!
  buildNumber: String
  createdAt: InstantTime
  deployedAt: InstantTime
  resources: [MdResource!]
  gitMetadata: MdGitMetadata
  environment: String
  reference: String!
  status: MdArtifactStatusInEnvironment
  lifecycleSteps: [MdLifecycleStep!]
  constraints: [MdConstraint!]
  verifications: [MdVerification!]
}

enum MdLifecycleEventScope {
  PRE_DEPLOYMENT
}

enum MdLifecycleEventType {
  BAKE
  BUILD
}

enum MdLifecycleEventStatus {
  NOT_STARTED
  RUNNING
  SUCCEEDED
  FAILED
  ABORTED
  UNKNOWN
}

type MdLifecycleStep {
  scope: MdLifecycleEventScope
  type: MdLifecycleEventType!
  id: String
  status: MdLifecycleEventStatus!
  text: String
  link: String
  startedAt: InstantTime
  completedAt: InstantTime
  artifactVersion: String
}

type MdGitMetadata {
  commit: String
  author: String
  project: String
  branch: String
  repoName: String
  pullRequest: MdPullRequest
  commitInfo: MdCommitInfo
}

type MdPullRequest {
  number: String
  link: String
}

type MdCommitInfo {
  sha: String
  link: String
  message: String
}

enum MdResourceActuationStatus {
  PROCESSING
  UP_TO_DATE
  ERROR
  WAITING
  NOT_MANAGED
}

type MdResourceActuationState {
  status: MdResourceActuationStatus!
  reason: String
  event: String
}

type MdResource {
  id: String!
  kind: String!
  moniker: MdMoniker
  state: MdResourceActuationState
  artifact: MdArtifact
  displayName: String
  location: MdLocation
}

type MdMoniker {
  app: String
  stack: String
  detail: String
}

type MdLocation {
  account: String
  regions: [String!]
}

enum MdConstraintStatus {
  PENDING
  PASS
  FAIL
  FORCE_PASS
}

enum MdArtifactStatusInEnvironment {
  PENDING
  APPROVED
  DEPLOYING
  CURRENT
  PREVIOUS
  VETOED
  SKIPPED
}

type MdConstraint {
  type: String!
  status: MdConstraintStatus!
  startedAt: InstantTime
  judgedAt: InstantTime
  judgedBy: String
  comment: String
  attributes: JSON
}

enum MdVerificationStatus {
  NOT_EVALUATED
  PENDING
  PASS
  FAIL
  FORCE_PASS
}

type MdVerification {
  id: String!
  type: String!
  status: MdVerificationStatus!
  startedAt: InstantTime
  completedAt: InstantTime
  link: String
}

type Mutation {
  updateConstraintStatus(application: String, environment: String, status: MdConstraintStatusUpdate): Boolean
}

input MdConstraintStatusUpdate {
  type: String!
  artifactVersion: String!
  artifactReference: String!
  status: MdConstraintStatus!
}
