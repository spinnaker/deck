import * as React from 'react';
import { Option } from 'react-select';

import {
  AccountService,
  IAccount,
  IExpectedArtifact,
  IRegion,
  IStageConfigProps,
  ReactSelectInput,
  StageConfigField,
  StageArtifactSelector,
  IArtifact,
} from '@spinnaker/core';

import { CreateServiceInstanceDirectInput } from './CreateServiceInstanceDirectInput';
import { CreateUserProvidedInput } from './CreateUserProvidedInput';
import { ICloudFoundryServiceManifestSource } from './ICloudFoundryServiceManifestSource';

import './cloudfoundryDeployServiceStage.less';

interface ICloudfoundryDeployServiceStageConfigState {
  regions: IRegion[];
  accounts: IAccount[];
}

export class CloudfoundryDeployServiceStageConfig extends React.Component<
  IStageConfigProps,
  ICloudfoundryDeployServiceStageConfigState
> {
  private defaultDirectManifest = {
    direct: {
      service: '',
      serviceInstanceName: '',
      servicePlan: '',
      parameters: '',
    },
  };

  // Hack necessary probably because of stage.module.js manually unmounting the component.
  // There is no apparent way to cancel IPromises generated by AccountService.
  private mounted = true;

  constructor(props: IStageConfigProps) {
    super(props);
    this.props.updateStageField({ cloudProvider: 'cloudfoundry' });
    this.state = {
      accounts: [],
      regions: [],
    };
  }

  private accountUpdated = (option: Option<string>): void => {
    const credentials = option.target.value;
    const updates: any = { credentials: credentials, region: '' };
    if (!this.props.stage.manifest || this.props.stage.manifest.direct) {
      updates.manifest = this.defaultDirectManifest;
    }
    this.props.updateStageField(updates);
    this.reloadRegions();
  };

  public componentWillUnmount(): void {
    this.mounted = false;
  }

  public componentDidMount = (): void => {
    AccountService.listAccounts('cloudfoundry').then(accounts => {
      if (this.mounted) {
        this.setState({ accounts: accounts });
      }
    });
    this.reloadRegions();
  };

  private reloadRegions = () => {
    if (this.props.stage.credentials) {
      if (this.mounted) {
        AccountService.getRegionsForAccount(this.props.stage.credentials).then(regions => this.setState({ regions }));
      }
    }
  };

  private manifestSourceUpdated = (source: string): void => {
    switch (source) {
      case 'direct':
        this.props.updateStageField({ manifest: this.defaultDirectManifest });
        break;
      case 'artifact':
        this.props.updateStageField({ manifest: {} });
        break;
    }
  };

  private onExpectedArtifactSelected = (expectedArtifact: IExpectedArtifact): void => {
    this.props.updateStageField({ manifest: { artifactId: expectedArtifact.id } });
  };

  private onArtifactChanged = (artifact: IArtifact): void => {
    this.props.updateStageField({ manifest: { artifact: artifact } });
  };

  private regionUpdated = (option: Option<string>): void => {
    const updates: any = { region: option.target.value };
    const direct = this.props.stage.manifest.direct;
    if (direct) {
      updates.manifest = this.defaultDirectManifest;
    }
    this.props.updateStageField(updates);
  };

  private serviceManifestSourceUpdated = (manifest: ICloudFoundryServiceManifestSource) => {
    this.props.updateStageField({ manifest: manifest });
  };

  private userProvidedUpdated = (event: React.ChangeEvent<HTMLInputElement>): void => {
    this.props.updateStageField({ userProvided: event.target.checked });
  };

  public render() {
    const { pipeline } = this.props;
    const { credentials, region, userProvided, stage, manifest } = this.props.stage;
    const { accounts, regions } = this.state;
    const directInput = !manifest || !!manifest.direct;
    let manifestInput;

    if (directInput) {
      const directManifest = (manifest && manifest.direct) || this.defaultDirectManifest;
      manifestInput = userProvided ? (
        <CreateUserProvidedInput onChange={this.serviceManifestSourceUpdated} serviceInput={directManifest} />
      ) : (
        <CreateServiceInstanceDirectInput
          credentials={credentials}
          region={region}
          service={directManifest}
          onServiceChanged={direct => this.serviceManifestSourceUpdated({ direct: direct })}
        />
      );
    } else {
      manifestInput = (
        <StageConfigField label="Artifact">
          <StageArtifactSelector
            pipeline={pipeline}
            stage={stage}
            expectedArtifactId={manifest.artifactId}
            artifact={manifest.artifact}
            onExpectedArtifactSelected={this.onExpectedArtifactSelected}
            onArtifactEdited={this.onArtifactChanged}
          />
        </StageConfigField>
      );
    }

    return (
      <div className="form-horizontal cloudfoundry-deploy-service-stage">
        <StageConfigField label="Account">
          <ReactSelectInput
            clearable={false}
            onChange={this.accountUpdated}
            value={credentials}
            stringOptions={accounts.map(it => it.name)}
          />
        </StageConfigField>
        <StageConfigField label="Region">
          <ReactSelectInput
            clearable={false}
            onChange={this.regionUpdated}
            value={region}
            stringOptions={regions.map(it => it.name)}
          />
        </StageConfigField>
        <StageConfigField label="User-provided">
          <input type="checkbox" checked={!!userProvided} onChange={this.userProvidedUpdated} />
        </StageConfigField>
        <StageConfigField label="Configuration Source">
          <div className="radio radio-inline">
            <label>
              <input type="radio" checked={!directInput} onChange={() => this.manifestSourceUpdated('artifact')} />{' '}
              Manifest
            </label>
          </div>
          <div className="radio radio-inline">
            <label>
              <input type="radio" checked={directInput} onChange={() => this.manifestSourceUpdated('direct')} /> Form
            </label>
          </div>
        </StageConfigField>
        {manifestInput}
      </div>
    );
  }
}
